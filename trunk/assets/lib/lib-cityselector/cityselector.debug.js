;
(function(win, lib) {

    var strChineseFirstPY = "";
    //此处收录了375个多音字
    var oMultiDiff = {
        "19969": "DZ",
        "19975": "WM",
        "19988": "QJ",
        "20048": "YL",
        "20056": "SC",
        "20060": "NM",
        "20094": "QG",
        "20127": "QJ",
        "20167": "QC",
        "20193": "YG",
        "20250": "KH",
        "20256": "ZC",
        "20282": "SC",
        "20285": "QJG",
        "20291": "TD",
        "20314": "YD",
        "20340": "NE",
        "20375": "TD",
        "20389": "YJ",
        "20391": "CZ",
        "20415": "PB",
        "20446": "YS",
        "20447": "SQ",
        "20504": "TC",
        "20608": "KG",
        "20854": "QJ",
        "20857": "ZC",
        "20911": "PF",
        "20504": "TC",
        "20608": "KG",
        "20854": "QJ",
        "20857": "ZC",
        "20911": "PF",
        "20985": "AW",
        "21032": "PB",
        "21048": "XQ",
        "21049": "SC",
        "21089": "YS",
        "21119": "JC",
        "21242": "SB",
        "21273": "SC",
        "21305": "YP",
        "21306": "QO",
        "21330": "ZC",
        "21333": "SDC",
        "21345": "QK",
        "21378": "CA",
        "21397": "SC",
        "21414": "XS",
        "21442": "SC",
        "21477": "JG",
        "21480": "TD",
        "21484": "ZS",
        "21494": "YX",
        "21505": "YX",
        "21512": "HG",
        "21523": "XH",
        "21537": "PB",
        "21542": "PF",
        "21549": "KH",
        "21571": "E",
        "21574": "DA",
        "21588": "TD",
        "21589": "O",
        "21618": "ZC",
        "21621": "KHA",
        "21632": "ZJ",
        "21654": "KG",
        "21679": "LKG",
        "21683": "KH",
        "21710": "A",
        "21719": "YH",
        "21734": "WOE",
        "21769": "A",
        "21780": "WN",
        "21804": "XH",
        "21834": "A",
        "21899": "ZD",
        "21903": "RN",
        "21908": "WO",
        "21939": "ZC",
        "21956": "SA",
        "21964": "YA",
        "21970": "TD",
        "22003": "A",
        "22031": "JG",
        "22040": "XS",
        "22060": "ZC",
        "22066": "ZC",
        "22079": "MH",
        "22129": "XJ",
        "22179": "XA",
        "22237": "NJ",
        "22244": "TD",
        "22280": "JQ",
        "22300": "YH",
        "22313": "XW",
        "22331": "YQ",
        "22343": "YJ",
        "22351": "PH",
        "22395": "DC",
        "22412": "TD",
        "22484": "PB",
        "22500": "PB",
        "22534": "ZD",
        "22549": "DH",
        "22561": "PB",
        "22612": "TD",
        "22771": "KQ",
        "22831": "HB",
        "22841": "JG",
        "22855": "QJ",
        "22865": "XQ",
        "23013": "ML",
        "23081": "WM",
        "23487": "SX",
        "23558": "QJ",
        "23561": "YW",
        "23586": "YW",
        "23614": "YW",
        "23615": "SN",
        "23631": "PB",
        "23646": "ZS",
        "23663": "ZT",
        "23673": "YG",
        "23762": "TD",
        "23769": "ZS",
        "23780": "QJ",
        "23884": "QK",
        "24055": "XH",
        "24113": "DC",
        "24162": "ZC",
        "24191": "GA",
        "24273": "QJ",
        "24324": "NL",
        "24377": "TD",
        "24378": "QJ",
        "24439": "PF",
        "24554": "ZS",
        "24683": "TD",
        "24694": "WE",
        "24733": "LK",
        "24925": "TN",
        "25094": "ZG",
        "25100": "XQ",
        "25103": "XH",
        "25153": "PB",
        "25170": "PB",
        "25179": "KG",
        "25203": "PB",
        "25240": "ZS",
        "25282": "FB",
        "25303": "NA",
        "25324": "KG",
        "25341": "ZY",
        "25373": "WZ",
        "25375": "XJ",
        "25384": "A",
        "25457": "A",
        "25528": "SD",
        "25530": "SC",
        "25552": "TD",
        "25774": "ZC",
        "25874": "ZC",
        "26044": "YW",
        "26080": "WM",
        "26292": "PB",
        "26333": "PB",
        "26355": "ZY",
        "26366": "CZ",
        "26397": "ZC",
        "26399": "QJ",
        "26415": "ZS",
        "26451": "SB",
        "26526": "ZC",
        "26552": "JG",
        "26561": "TD",
        "26588": "JG",
        "26597": "CZ",
        "26629": "ZS",
        "26638": "YL",
        "26646": "XQ",
        "26653": "KG",
        "26657": "XJ",
        "26727": "HG",
        "26894": "ZC",
        "26937": "ZS",
        "26946": "ZC",
        "26999": "KJ",
        "27099": "KJ",
        "27449": "YQ",
        "27481": "XS",
        "27542": "ZS",
        "27663": "ZS",
        "27748": "TS",
        "27784": "SC",
        "27788": "ZD",
        "27795": "TD",
        "27812": "O",
        "27850": "PB",
        "27852": "MB",
        "27895": "SL",
        "27898": "PL",
        "27973": "QJ",
        "27981": "KH",
        "27986": "HX",
        "27994": "XJ",
        "28044": "YC",
        "28065": "WG",
        "28177": "SM",
        "28267": "QJ",
        "28291": "KH",
        "28337": "ZQ",
        "28463": "LT",
        "28548": "DC",
        "28601": "TD",
        "28689": "PB",
        "28805": "JG",
        "28820": "QG",
        "28846": "PB",
        "28952": "TD",
        "28975": "ZC",
        "29100": "A",
        "29325": "QJ",
        "29575": "SL",
        "29602": "FB",
        "30010": "TD",
        "30044": "CX",
        "30058": "PF",
        "30091": "YSP",
        "30111": "YN",
        "30229": "XJ",
        "30427": "SC",
        "30465": "SX",
        "30631": "YQ",
        "30655": "QJ",
        "30684": "QJG",
        "30707": "SD",
        "30729": "XH",
        "30796": "LG",
        "30917": "PB",
        "31074": "NM",
        "31085": "JZ",
        "31109": "SC",
        "31181": "ZC",
        "31192": "MLB",
        "31293": "JQ",
        "31400": "YX",
        "31584": "YJ",
        "31896": "ZN",
        "31909": "ZY",
        "31995": "XJ",
        "32321": "PF",
        "32327": "ZY",
        "32418": "HG",
        "32420": "XQ",
        "32421": "HG",
        "32438": "LG",
        "32473": "GJ",
        "32488": "TD",
        "32521": "QJ",
        "32527": "PB",
        "32562": "ZSQ",
        "32564": "JZ",
        "32735": "ZD",
        "32793": "PB",
        "33071": "PF",
        "33098": "XL",
        "33100": "YA",
        "33152": "PB",
        "33261": "CX",
        "33324": "BP",
        "33333": "TD",
        "33406": "YA",
        "33426": "WM",
        "33432": "PB",
        "33445": "JG",
        "33486": "ZN",
        "33493": "TS",
        "33507": "QJ",
        "33540": "QJ",
        "33544": "ZC",
        "33564": "XQ",
        "33617": "YT",
        "33632": "QJ",
        "33636": "XH",
        "33637": "YX",
        "33694": "WG",
        "33705": "PF",
        "33728": "YW",
        "33882": "SR",
        "34067": "WM",
        "34074": "YW",
        "34121": "QJ",
        "34255": "ZC",
        "34259": "XL",
        "34425": "JH",
        "34430": "XH",
        "34485": "KH",
        "34503": "YS",
        "34532": "HG",
        "34552": "XS",
        "34558": "YE",
        "34593": "ZL",
        "34660": "YQ",
        "34892": "XH",
        "34928": "SC",
        "34999": "QJ",
        "35048": "PB",
        "35059": "SC",
        "35098": "ZC",
        "35203": "TQ",
        "35265": "JX",
        "35299": "JX",
        "35782": "SZ",
        "35828": "YS",
        "35830": "E",
        "35843": "TD",
        "35895": "YG",
        "35977": "MH",
        "36158": "JG",
        "36228": "QJ",
        "36426": "XQ",
        "36466": "DC",
        "36710": "JC",
        "36711": "ZYG",
        "36767": "PB",
        "36866": "SK",
        "36951": "YW",
        "37034": "YX",
        "37063": "XH",
        "37218": "ZC",
        "37325": "CZ",
        "38063": "PB",
        "38079": "TD",
        "38085": "QY",
        "38107": "DC",
        "38116": "TD",
        "38123": "YD",
        "38224": "HG",
        "38241": "XTC",
        "38271": "ZC",
        "38415": "YE",
        "38426": "KH",
        "38461": "YD",
        "38463": "AE",
        "38466": "PB",
        "38477": "XJ",
        "38518": "YT",
        "38551": "WK",
        "38585": "ZC",
        "38704": "XS",
        "38739": "LJ",
        "38761": "GJ",
        "38808": "SQ",
        "39048": "JG",
        "39049": "XJ",
        "39052": "HG",
        "39076": "CZ",
        "39271": "XT",
        "39534": "TD",
        "39552": "TD",
        "39584": "PB",
        "39647": "SB",
        "39730": "LG",
        "39748": "TPB",
        "40109": "ZQ",
        "40479": "ND",
        "40516": "HG",
        "40536": "HG",
        "40583": "QJ",
        "40765": "YQ",
        "40784": "QJ",
        "40840": "YK",
        "40863": "QJG"
    };
    //参数,中文字符串
    //返回值:拼音首字母串数组
    function makePy(str) {
        if (typeof(str) != "string")
            throw new Error(-1, "函数makePy需要字符串类型参数!");
        var arrResult = new Array(); //保存中间结果的数组
        for (var i = 0, len = str.length; i < len; i++) {
            //获得unicode码
            var ch = str.charAt(i);
            //检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理
            arrResult.push(checkCh(ch));
        }
        //处理arrResult,返回所有可能的拼音首字母串数组
        return mkRslt(arrResult);
    }

    function checkCh(ch) {
        var uni = ch.charCodeAt(0);
        //如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数
        if (uni > 40869 || uni < 19968)
            return ch; //dealWithOthers(ch);
        //检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母
        return (oMultiDiff[uni] ? oMultiDiff[uni] : (strChineseFirstPY.charAt(uni - 19968)));
    }

    function mkRslt(arr) {
        var arrRslt = [""];
        for (var i = 0, len = arr.length; i < len; i++) {
            var str = arr[i];
            var strlen = str.length;
            if (strlen == 1) {
                for (var k = 0; k < arrRslt.length; k++) {
                    arrRslt[k] += str;
                }
            } else {
                var tmpArr = arrRslt.slice(0);
                arrRslt = [];
                for (k = 0; k < strlen; k++) {
                    //复制一个相同的arrRslt
                    var tmp = tmpArr.slice(0);
                    //把当前字符str[k]添加到每个元素末尾
                    for (var j = 0; j < tmp.length; j++) {
                        tmp[j] += str.charAt(k);
                    }
                    //把复制并修改后的数组连接到arrRslt上
                    arrRslt = arrRslt.concat(tmp);
                }
            }
        }
        return arrRslt;
    }
    //两端去空格函数
    String.prototype.trim = function() {
        return this.replace(/(^\s*)|(\s*$)/g, "");
    }

    lib.toPY = makePy;

})(window, window.lib || (window.lib = {}));;;
(function(win, lib) {

    function Motion(config){

        this.v = config.v || 0;
        this.a = config.a || 0;
        
        if(typeof config.t !== 'undefined') {
            this.t = config.t;
        }

        if(typeof config.s !== 'undefined') {
            this.s = config.s;
        }

        if (typeof this.t === 'undefined') {
            if (typeof this.s === 'undefined') {
                this.t = - this.v / this.a;
            } else {
                var t1 = (Math.sqrt(this.v * this.v + 2 * this.a * this.s) - this.v) / this.a;
                var t2 = (-Math.sqrt(this.v * this.v + 2 * this.a * this.s) - this.v) / this.a;
                this.t = Math.min(t1, t2);
            }
        }

        if (typeof this.s === 'undefined') {
            this.s = this.a * this.t * this.t / 2 + this.v * this.t;
        }
        
        this.generateCubicBezier = function() {
            function quadratic2cubicBezier(a, b) {
                return [[(a / 3 + (a + b) / 3 - a) / (b - a), (a * a / 3 + a * b * 2 / 3 - a * a) / (b * b - a * a)],
                    [(b / 3 + (a + b) / 3 - a) / (b - a), (b * b / 3 + a * b * 2 / 3 - a * a) / (b * b - a * a)]];
            }
            return quadratic2cubicBezier( this.v / this.a , this.t + this.v / this.a );
        }
        
    };

    lib.motion = function(config) {
        return new Motion(config);
    }

})(window, window['lib'] || (window['lib'] = {}));;(function(win, lib, undef) {

'use strict';

var doc = win.document,
    docEl = doc.documentElement,
    slice = Array.prototype.slice,
    gestures = {}, lastTap = null
    ;

/**
 * 找到两个结点共同的最小根结点
 * 如果跟结点不存在，则返回null
 * 
 * @param  {Element} el1 第一个结点
 * @param  {Element} el2 第二个结点
 * @return {Element}     根结点
 */
function getCommonAncestor(el1, el2) {
    var el = el1;
    while (el) {
        if (el.contains(el2) || el == el2) {
            return el;
        }
        el = el.parentNode;
    }
    return null;
}

/**
 * 触发一个事件
 * 
 * @param  {Element} element 目标结点
 * @param  {string}  type    事件类型
 * @param  {object}  extra   对事件对象的扩展
 */
function fireEvent(element, type, extra) {
    var event = doc.createEvent('HTMLEvents');
    event.initEvent(type, true, true);

    if(typeof extra === 'object') {
        for(var p in extra) {
            event[p] = extra[p];
        }
    }

    element.dispatchEvent(event);
}

/**
 * 计算变换效果
 * 假设坐标系上有4个点ABCD
 * > 旋转：从AB旋转到CD的角度
 * > 缩放：从AB长度变换到CD长度的比例
 * > 位移：从A点位移到C点的横纵位移
 * 
 * @param  {number} x1 上述第1个点的横坐标
 * @param  {number} y1 上述第1个点的纵坐标
 * @param  {number} x2 上述第2个点的横坐标
 * @param  {number} y2 上述第2个点的纵坐标
 * @param  {number} x3 上述第3个点的横坐标
 * @param  {number} y3 上述第3个点的纵坐标
 * @param  {number} x4 上述第4个点的横坐标
 * @param  {number} y4 上述第4个点的纵坐标
 * @return {object}    变换效果，形如{rotate, scale, translate[2], matrix[3][3]}
 */
function calc(x1, y1, x2, y2, x3, y3, x4, y4) {
    var rotate = Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y2 - y1, x2 - x1),
        scale = Math.sqrt((Math.pow(y4 - y3, 2) + Math.pow(x4 - x3, 2)) / (Math.pow(y2 - y1, 2) + Math.pow(x2 - x1, 2))),
        translate = [x3 - scale * x1 * Math.cos(rotate) + scale * y1 * Math.sin(rotate), y3 - scale * y1 * Math.cos(rotate) - scale * x1 * Math.sin(rotate)]
        ;
    return {
        rotate: rotate,
        scale: scale,
        translate: translate,
        matrix: [
            [scale * Math.cos(rotate), -scale * Math.sin(rotate), translate[0]],
            [scale * Math.sin(rotate), scale * Math.cos(rotate), translate[1]],
            [0, 0, 1]
        ]
    };
}

/**
 * 捕获touchstart事件，将每一个新增的触点添加到gestrues
 * 如果之前尚无被记录的触点，则绑定touchmove, touchend, touchcancel事件
 * 
 * 新增触点默认处于tapping状态
 * 500毫秒之后如果还处于tapping状态，则触发press手势
 * 如果触点数为2，则触发dualtouchstart手势，该手势的目标结点为两个触点共同的最小根结点
 *
 * @event
 * @param  {event} event
 */
function touchstartHandler(event) {

    if (Object.keys(gestures).length === 0) {
        docEl.addEventListener('touchmove', touchmoveHandler, false);
        docEl.addEventListener('touchend', touchendHandler, false);
        docEl.addEventListener('touchcancel', touchcancelHandler, false);
    }
    
    // 记录每一个触点
    // TODO: 变量声明方式，建议在函数最前面声明
    for(var i = 0 ; i < event.changedTouches.length ; i++ ) {
        var touch = event.changedTouches[i],
            touchRecord = {};

        for (var p in touch) {
            touchRecord[p] = touch[p];
        }

        var gesture = {
            startTouch: touchRecord,
            startTime: Date.now(),
            status: 'tapping',
            element: event.srcElement,
            // TODO: Don't make functions within a loop
            pressingHandler: setTimeout(function(element) {
                return function () {
                    if (gesture.status === 'tapping') {
                        gesture.status = 'pressing';

                        fireEvent(element, 'press', {
                            touchEvent:event
                        });
                    }

                    clearTimeout(gesture.pressingHandler);
                    gesture.pressingHandler = null;
                };
            }(event.srcElement), 500)
        };
        gestures[touch.identifier] = gesture;
    }

    // TODO: 变量声明方式，建议在函数最前面声明
    if (Object.keys(gestures).length == 2) {
        var elements = [];

        for(var p in gestures) {
            elements.push(gestures[p].element);
        }

        fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchstart', {
            touches: slice.call(event.touches),
            touchEvent: event
        });
    }
}

/**
 * 捕获touchmove事件，处理pan和dual的相关手势
 * 
 * 1. 遍历每个触点：
 * > 如果触点之前处于tapping状态，且位移超过10像素，则认定为进入panning状态
 * 先触发panstart手势，然后根据移动的方向选择性触发horizontalpanstart或verticalpanstart手势
 * > 如果触点之前处于panning状态，则根据pan的初始方向触发horizontalpan或verticalpan手势
 * 
 * 2. 如果当前触点数为2，则计算出几何变换的各项参数，触发dualtouch手势
 * 
 * @event
 * @param  {event} event
 */
function touchmoveHandler(event) {
    // TODO: 函数太大了，影响可读性，建议分解并加必要的注释

    // 遍历每个触点：
    // 1. 如果触点之前处于tapping状态，且位移超过10像素，则认定为进入panning状态
    // 先触发panstart手势，然后根据移动的方向选择性触发horizontalpanstart或verticalpanstart手势
    // 2. 如果触点之前处于panning状态，则根据pan的初始方向触发horizontalpan或verticalpan手势
    for(var i = 0 ; i < event.changedTouches.length ; i++ ) {
        var touch = event.changedTouches[i],
            gesture = gestures[touch.identifier];

        if (!gesture) {
            return;
        }
        
        if(!gesture.lastTouch) {
            gesture.lastTouch = gesture.startTouch;
        }
        if(!gesture.lastTime) {
            gesture.lastTime = gesture.startTime;
        }
        if(!gesture.velocityX) {
            gesture.velocityX = 0;
        }
        if(!gesture.velocityY) {
            gesture.velocityY = 0;
        }
        if(!gesture.duration) {
            gesture.duration = 0;
        }
        
        var time =  Date.now()-gesture.lastTime;
        var vx = (touch.clientX - gesture.lastTouch.clientX)/time,
            vy = (touch.clientY - gesture.lastTouch.clientY)/time;
        
        var RECORD_DURATION = 70;
        if( time > RECORD_DURATION ) {
            time = RECORD_DURATION;
        }
        if( gesture.duration + time > RECORD_DURATION ) {
            gesture.duration = RECORD_DURATION - time;
        }

        gesture.velocityX = (gesture.velocityX * gesture.duration + vx * time) / (gesture.duration+ time);
        gesture.velocityY = (gesture.velocityY * gesture.duration + vy * time) / (gesture.duration+ time);
        gesture.duration += time;

        gesture.lastTouch = {};
        
        for (var p in touch) {
            gesture.lastTouch[p] = touch[p];
        }
        gesture.lastTime = Date.now();

        var displacementX = touch.clientX - gesture.startTouch.clientX,
            displacementY = touch.clientY - gesture.startTouch.clientY,
            distance = Math.sqrt(Math.pow(displacementX, 2) + Math.pow(displacementY, 2));
        
        // magic number 10: moving 10px means pan, not tap
        if ((gesture.status === 'tapping' || gesture.status === 'pressing') && distance > 10) {
            gesture.status = 'panning';
            gesture.isVertical = !(Math.abs(displacementX) > Math.abs(displacementY));

            fireEvent(gesture.element, 'panstart', {
                touch:touch,
                touchEvent:event,
                isVertical: gesture.isVertical
            });

            fireEvent(gesture.element, (gesture.isVertical?'vertical':'horizontal') + 'panstart', {
                touch: touch,
                touchEvent: event
            });
        }

        if (gesture.status === 'panning') {
            gesture.panTime = Date.now();
            fireEvent(gesture.element, 'pan', {
                displacementX: displacementX,
                displacementY: displacementY,
                touch: touch,
                touchEvent: event,
                isVertical: gesture.isVertical
            });


            if(gesture.isVertical) {
                fireEvent(gesture.element, 'verticalpan',{
                    displacementY: displacementY,
                    touch: touch,
                    touchEvent: event
                });
            } else {
                fireEvent(gesture.element, 'horizontalpan',{
                    displacementX: displacementX,
                    touch: touch,
                    touchEvent: event
                });
            }
        }
    }

    // 如果当前触点数为2，则计算出几何变换的各项参数，触发dualtouch手势
    if (Object.keys(gestures).length == 2) {
        var position = [],
            current = [],
            elements = [],
            transform
            ;
        
        // TODO: 变量声明方式，建议在函数最前面声明
        for(var i = 0 ; i < event.touches.length ; i++ ) {
            var touch = event.touches[i];
            var gesture = gestures[touch.identifier];
            position.push([gesture.startTouch.clientX, gesture.startTouch.clientY]);
            current.push([touch.clientX, touch.clientY]);
        }

        // TODO: 变量声明方式，建议在函数最前面声明
        for(var p in gestures) {
            elements.push(gestures[p].element);
        }

        transform = calc(position[0][0], position[0][1], position[1][0], position[1][1], current[0][0], current[0][1], current[1][0], current[1][1]);
        fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouch',{
            transform : transform,
            touches : event.touches,
            touchEvent: event
        });
    }
}

/**
 * 捕获touchend事件
 * 
 * 1. 如果当前触点数为2，则触发dualtouchend手势
 *
 * 2. 遍历每个触点：
 * > 如果处于tapping状态，则触发tap手势
 * 如果之前300毫秒出现过tap手势，则升级为doubletap手势
 * > 如果处于panning状态，则根据滑出的速度，触发panend/flick手势
 * flick手势被触发之后，再根据滑出的方向触发verticalflick/horizontalflick手势
 * > 如果处于pressing状态，则触发pressend手势
 *
 * 3. 解绑定所有相关事件
 * 
 * @event
 * @param  {event} event
 */
function touchendHandler(event) {

    if (Object.keys(gestures).length == 2) {
        var elements = [];
        for(var p in gestures) {
            elements.push(gestures[p].element);
        }
        fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchend', {
            touches: slice.call(event.touches),
            touchEvent: event
        });
    }
    
    for (var i = 0; i < event.changedTouches.length; i++) {
        var touch = event.changedTouches[i],
            id = touch.identifier,
            gesture = gestures[id];

        if (!gesture) continue;

        if (gesture.pressingHandler) {
            clearTimeout(gesture.pressingHandler);
            gesture.pressingHandler = null;
        }

        if (gesture.status === 'tapping') {
            gesture.timestamp = Date.now();
            fireEvent(gesture.element, 'tap', {
                touch: touch,
                touchEvent: event
            });

            if(lastTap && gesture.timestamp - lastTap.timestamp < 300) {
                fireEvent(gesture.element, 'doubletap', {
                    touch: touch,
                    touchEvent: event
                });
            }

            lastTap = gesture;
        }

        if (gesture.status === 'panning') {
            var now = Date.now();
            var duration = now - gesture.startTime,
                // TODO: velocityX & velocityY never used
                velocityX = (touch.clientX - gesture.startTouch.clientX) / duration,
                velocityY = (touch.clientY - gesture.startTouch.clientY) / duration,
                displacementX = touch.clientX - gesture.startTouch.clientX,
                displacementY = touch.clientY - gesture.startTouch.clientY
                ;

            var velocity = Math.sqrt(gesture.velocityY*gesture.velocityY+gesture.velocityX*gesture.velocityX);
            var isflick = velocity > 0.5;

            fireEvent(gesture.element, 'panend', {
                isflick: isflick,
                touch: touch,
                touchEvent: event,
                isVertical: gesture.isVertical
            });
            
            if (isflick) {
                fireEvent(gesture.element, 'flick', {
                    duration: duration,
                    velocityX: gesture.velocityX,
                    velocityY: gesture.velocityY,
                    displacementX: displacementX,
                    displacementY: displacementY,
                    touch: touch,
                    touchEvent: event,
                    isVertical: gesture.isVertical
                });

                if(gesture.isVertical) {
                    fireEvent(gesture.element, 'verticalflick', {
                        duration: duration,
                        velocityY: gesture.velocityY,
                        displacementY: displacementY,
                        touch: touch,
                        touchEvent: event
                    });
                } else {
                    fireEvent(gesture.element, 'horizontalflick', {
                        duration: duration,
                        velocityX: gesture.velocityX,
                        displacementX: displacementX,
                        touch: touch,
                        touchEvent: event
                    });
                }
            }
        }

        if (gesture.status === 'pressing') {
            fireEvent(gesture.element, 'pressend', {
                touch: touch,
                touchEvent: event
            });
        }

        delete gestures[id];
    }

    if (Object.keys(gestures).length === 0) {
        docEl.removeEventListener('touchmove', touchmoveHandler, false);
        docEl.removeEventListener('touchend', touchendHandler, false);
        docEl.removeEventListener('touchcancel', touchcancelHandler, false);
    }
}

/**
 * 捕获touchcancel事件
 * 
 * 1. 如果当前触点数为2，则触发dualtouchend手势
 *
 * 2. 遍历每个触点：
 * > 如果处于panning状态，则触发panend手势
 * > 如果处于pressing状态，则触发pressend手势
 *
 * 3. 解绑定所有相关事件
 * 
 * @event
 * @param  {event} event
 */
function touchcancelHandler(event) {
    // TODO: 和touchendHandler大量重复，建议DRY

    if (Object.keys(gestures).length == 2) {
        var elements = [];
        for(var p in gestures) {
            elements.push(gestures[p].element);
        }
        fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchend', {
            touches: slice.call(event.touches),
            touchEvent: event
        });
    }

    for (var i = 0; i < event.changedTouches.length; i++) {
        var touch = event.changedTouches[i],
            id = touch.identifier,
            gesture = gestures[id];

        if (!gesture) continue;

        if (gesture.pressingHandler) {
            clearTimeout(gesture.pressingHandler);
            gesture.pressingHandler = null;
        }

        if (gesture.status === 'panning') {
            fireEvent(gesture.element, 'panend', {
                touch: touch,
                touchEvent: event
            });
        }
        if (gesture.status === 'pressing') {
            fireEvent(gesture.element, 'pressend', {
                touch: touch,
                touchEvent: event
            });
        }
        delete gestures[id];
    }

    if (Object.keys(gestures).length === 0) {
        docEl.removeEventListener('touchmove', touchmoveHandler, false);
        docEl.removeEventListener('touchend', touchendHandler, false);
        docEl.removeEventListener('touchcancel', touchcancelHandler, false);
    }
}

docEl.addEventListener('touchstart', touchstartHandler, false);

})(window, window.lib || (window.lib = {}));
;(function(win, lib, undef) {
var doc = win.document;
var scrollObjs = {};
var plugins = {};
var inertiaCoefficient = {
    'normal': [2, 0.0015],
    'slow': [1.5, 0.003],
    'veryslow': [1.5, 0.005]
}

function debugLog() {
    if (lib.scroll.outputDebugLog) {
        console.debug.apply(console, arguments);
    }
}

function getBoundingClientRect(el) {
    var rect = el.getBoundingClientRect();
    if (!rect) {
        rect = {};
        rect.width = el.offsetWidth;
        rect.height = el.offsetHeight;

        rect.left = el.offsetLeft;
        rect.top = el.offsetTop;
        var parent = el.offsetParent;
        while (parent) {
            rect.left += parent.offsetLeft;
            rect.top += parent.offsetTop;
            parent = parent.offsetParent;
        }

        rect.right = rect.left + rect.width;
        rect.bottom = rect.top + rect.height;
    }
    return rect;
}

function getMinScrollOffset(scrollObj) {
    return 0 - scrollObj.options[scrollObj.axis + 'Padding1'];
}

function getMaxScrollOffset(scrollObj) {
    var rect = getBoundingClientRect(scrollObj.element);
    var pRect = getBoundingClientRect(scrollObj.viewport);
    var min = getMinScrollOffset(scrollObj);
    if (scrollObj.axis === 'y') {
        var max = 0 - rect.height + pRect.height;
    } else {
        var max = 0 - rect.width + pRect.width;
    }
    return Math.min(max + scrollObj.options[scrollObj.axis + 'Padding2'], min);
}

function getBoundaryOffset(scrollObj, offset) {
    if(offset > scrollObj.minScrollOffset) {
        return offset - scrollObj.minScrollOffset;
    } else if (offset < scrollObj.maxScrollOffset){
        return offset - scrollObj.maxScrollOffset;
    }
}

function touchBoundary(scrollObj, offset) {
    if (offset > scrollObj.minScrollOffset) {
        offset = scrollObj.minScrollOffset;
    } else if (offset < scrollObj.maxScrollOffset) {
        offset = scrollObj.maxScrollOffset;
    }
    return offset;
}

function fireEvent(scrollObj, eventName, extra) {
    debugLog(scrollObj.element.scrollId, eventName, extra);

    var event = doc.createEvent('HTMLEvents');
    event.initEvent(eventName, false, true);
    event.scrollObj = scrollObj;
    if (extra) {
        for (var key in extra) {
            event[key] = extra[key];
        }
    }
    scrollObj.element.dispatchEvent(event);
    scrollObj.viewport.dispatchEvent(event);
}

function getTransformOffset(scrollObj) {
    var offset = {x: 0, y: 0}; 
    var transform = getComputedStyle(scrollObj.element).webkitTransform;
    var matched;

    if (transform !== 'none') {
        if ((matched = transform.match(/^matrix3d\((?:[-\d.]+,\s*){12}([-\d.]+),\s*([-\d.]+)(?:,\s*[-\d.]+){2}\)/) ||
                transform.match(/^matrix\((?:[-\d.]+,\s*){4}([-\d.]+),\s*([-\d.]+)\)$/))) {
            offset.x = parseFloat(matched[1]) || 0;
            offset.y = parseFloat(matched[2]) || 0;
        }
    }

    return offset;
}

var has3d = 'WebKitCSSMatrix' in window && 'm11' in new WebKitCSSMatrix();
function getTranslate(x, y) {
    if (has3d) {
        return 'translate3d(' + x + 'px, ' + y + 'px, 0)';
    } else {
        return 'translate(' + x + 'px, ' + y + 'px)';
    }
}

var requestAnimationFrame = (function() {
    return  window.requestAnimationFrame || 
                window.webkitRequestAnimationFrame || 
            function(cb) {
                setTimeout(cb, 16);
            }
})();

var panning = false;
doc.addEventListener('touchmove', function(e){
    if (panning) {
        e.preventDefault();
        return false;
    }
    return true;
}, false);

function Scroll(element, options){
    var that = this;

    options = options || {};
    options.noBounce = !!options.noBounce;
    options.padding = options.padding || {};

    if (options.isPrevent == null) {
        options.isPrevent = true;
    } else {
        options.isPrevent = !!options.isPrevent;
    }

    if (options.isFixScrollendClick == null) {
        options.isFixScrollendClick = true;
    } else {
        options.isFixScrollendClick = !!options.isFixScrollendClick;
    }

    if (options.padding) {
        options.yPadding1 = -options.padding.top || 0;
        options.yPadding2 = -options.padding.bottom || 0;
        options.xPadding1 = -options.padding.left || 0;
        options.xPadding2 = -options.padding.right || 0;
    } else {
        options.yPadding1 = 0;
        options.yPadding2 = 0;
        options.xPadding1 = 0;
        options.xPadding2 = 0;
    }

    if (options.margin) {
        options.yMargin1 = -options.margin.top || 0;
        options.yMargin2 = -options.margin.bottom || 0;
        options.xMargin1 = -options.margin.left || 0;
        options.xMargin2 = -options.margin.right || 0;
    } else {
        options.yMargin1 = 0;
        options.yMargin2 = 0;
        options.xMargin1 = 0;
        options.xMargin2 = 0;
    }

    options.direction = options.direction || 'y';
    options.inertia = options.inertia || 'normal';

    this.options = options;
    that.axis = options.direction;
    this.element = element;
    this.viewport = element.parentNode;
    this.plugins = {};

    this.viewport.addEventListener('touchstart', touchstartHandler, false);
    this.viewport.addEventListener('touchend', touchendHandler, false);
    this.viewport.addEventListener('touchcancel', touchendHandler, false);
    this.viewport.addEventListener('panstart', panstartHandler, false);
    this.viewport.addEventListener('pan', panHandler, false);
    this.viewport.addEventListener('panend', panendHandler, false);
    this.viewport.addEventListener('flick', flickHandler, false);

    this.element.style.webkitBackfaceVisibility = 'hidden';
    this.element.style.webkitTransformStyle = 'preserve-3d';
    this.element.scrollId = setTimeout(function(){
        scrollObjs[that.element.scrollId + ''] = that;
    }, 1);

    if (options.isPrevent) {
        this.viewport.addEventListener('touchstart', function(e) {
            panning = true;
        }, false);
        that.viewport.addEventListener('touchend', function(e){  
            panning = false;
        }, false);
    }

    if (options.isFixScrollendClick) {
        var preventScrollendClick;
        var fixScrollendClickTimeoutId;

        this.viewport.addEventListener('scrolling', function() {
            preventScrollendClick = true;
            fixScrollendClickTimeoutId && clearTimeout(fixScrollendClickTimeoutId);
            fixScrollendClickTimeoutId = setTimeout(function(e){
                preventScrollendClick = false;
            }, 400);
        }, false);

        function preventScrollendClickHandler(e) {
            if (preventScrollendClick || isScrolling) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            } else {
                return true;
            }
        }

        function fireNiceTapEventHandler(e) {
            if (!preventScrollendClick && !isScrolling) {
                setTimeout(function(){
                    var niceTapEvent = document.createEvent('HTMLEvents');
                    niceTapEvent.initEvent('niceclick', true, true);
                    e.target.dispatchEvent(niceTapEvent);
                }, 300);
            }
        }

        this.viewport.addEventListener('click', preventScrollendClickHandler, false);
        this.viewport.addEventListener('tap', fireNiceTapEventHandler, false);
    }

    var webkitTransitionEndHandler;
    var transitionEndTimeoutId = 0;
    function setTransitionEndHandler(h, t) {
        webkitTransitionEndHandler = null;
        clearTimeout(transitionEndTimeoutId);
        
        transitionEndTimeoutId = setTimeout(function() {
            if (webkitTransitionEndHandler) {
                webkitTransitionEndHandler = null;
                requestAnimationFrame(h);
            }
        }, (t || 400));

        webkitTransitionEndHandler = h;   
    }

    element.addEventListener('webkitTransitionEnd', function(e) {
        if (webkitTransitionEndHandler) {
            var handler = webkitTransitionEndHandler;

            webkitTransitionEndHandler = null;
            clearTimeout(transitionEndTimeoutId);

            requestAnimationFrame(function(){
                handler(e);
            });
        }
    }, false);

    var panFixRatio;
    var isScrolling;
    var isFlickScrolling;
    var cancelScrollEnd;

    Object.defineProperty(this, 'isScrolling', {
        get: function() {
            return !!isScrolling;
        }
    });

    function touchstartHandler(e) {
        if (!that.enabled) {
            return;
        }

        if (isScrolling) {
            scrollEnd();
        }

        element.style.webkitBackfaceVisibility = 'hidden';
        element.style.webkitTransformStyle = 'preserve-3d';
        var transform = getTransformOffset(that);
        element.style.webkitTransform = getTranslate(transform.x, transform.y);
        element.style.webkitTransition = '';
        webkitTransitionEndHandler = null;
        clearTimeout(transitionEndTimeoutId);
    }

    function touchendHandler(e) {
        if (!that.enabled) {
            return;
        }

        var s0 = getTransformOffset(that)[that.axis];
        var boundaryOffset = getBoundaryOffset(that, s0);
        if (element.style.webkitTransition === '' && boundaryOffset) {
            var s1 = touchBoundary(that, s0);
            if (boundaryOffset > 0) {
                fireEvent(that, that.axis === 'y'?'pulldownend':'pullrightend');
            } else if (boundaryOffset < 0) {
                fireEvent(that, that.axis === 'y'?'pullupend':'pullleftend');
            }
            element.style.webkitTransition = '-webkit-transform 0.4s ease 0';
            element.style.webkitTransform = 'translate' + that.axis.toUpperCase() + '(' + s1.toFixed(0) + 'px)';
            setTransitionEndHandler(scrollEnd, 400);

            requestAnimationFrame(function() {
                if (isScrolling && that.enabled) {
                    fireEvent(that, 'scrolling');
                    requestAnimationFrame(arguments.callee);
                }
            });
        } else if (isScrolling) {
            scrollEnd();
        }
    }

    var lastDisplacement;
    function panstartHandler(e) {
        if (!that.enabled) {
            return;
        }

        // 不是同方向的手势，直接不做任何处理
        if (that.axis !== 'y' && e.isVertical || that.axis === 'x' && e.isVertical) {
            return;
        }

        // if (that.axis === 'y' && e.isVertical || that.axis === 'x' && !e.isVertical) {
        //     e.stopPropagation();    
        // }
        
        that.transformOffset = getTransformOffset(that);
        that.minScrollOffset = getMinScrollOffset(that);
        that.maxScrollOffset = getMaxScrollOffset(that);
        panFixRatio = 2.5;
        cancelScrollEnd = true;
        isScrolling = true;
        isFlickScrolling = false;
        fireEvent(that, 'scrollstart');

        lastDisplacement = e['displacement' + that.axis.toUpperCase()];
    }


    function panHandler(e) {
        if (!that.enabled) {
            return;
        }

        // 不是同方向的手势，直接不做任何处理
        if (that.axis === 'y' && e.isVertical || that.axis === 'x' && !e.isVertical) {
            e.stopPropagation();
        } else {
            return;
        }

        // 手指移动小于5像素，也忽略
        var displacement = e['displacement' + that.axis.toUpperCase()];
        if (Math.abs(displacement - lastDisplacement) < 5) {
            e.stopPropagation();
            return;
        }
        lastDisplacement = displacement;

        var offset = that.transformOffset[that.axis] + displacement;
        if(offset > that.minScrollOffset) {
            offset = that.minScrollOffset + (offset - that.minScrollOffset) / panFixRatio;
            panFixRatio *= 1.003;
        } else if(offset < that.maxScrollOffset) {
            offset = that.maxScrollOffset - (that.maxScrollOffset - offset) / panFixRatio;
            panFixRatio *= 1.003;
        }
        if (panFixRatio > 4) {
            panFixRatio = 4;
        }

        // 判断是否到了边缘
        var boundaryOffset = getBoundaryOffset(that, offset);
        if (boundaryOffset) {
            fireEvent(that, boundaryOffset > 0?(that.axis === 'y'?'pulldown':'pullright'):(that.axis === 'y'?'pullup':'pullleft'), {
                boundaryOffset: Math.abs(boundaryOffset)
            });
            if (that.options.noBounce) {
                offset = touchBoundary(that, offset);
            }
        }

        element.style.webkitTransition = '';
        if (that.axis === 'y') {
            element.style.webkitTransform = getTranslate(that.transformOffset.x, offset);  
        } else {
            element.style.webkitTransform = getTranslate(offset, that.transformOffset.y);
        }

        
        fireEvent(that, 'scrolling');
    }

    function panendHandler(e) {
        if (!that.enabled) {
            return;
        }

        // 不是同方向的手势，直接不做任何处理
        if (that.axis !== 'y' && e.isVertical || that.axis === 'x' && e.isVertical) {
            return;
        }

        // if (that.axis === 'y' && e.isVertical || that.axis === 'x' && !e.isVertical) {
        //     e.stopPropagation();    
        // }
    }

    function flickHandler(e) {
        if (!that.enabled) {
            return;
        }

        if (that.axis === 'y' && e.isVertical || that.axis === 'x' && !e.isVertical) {
            e.stopPropagation();
        } else {
            return;
        }

        cancelScrollEnd = true;
    
        var v0, a0, t0, s0, s, motion0;
        var v1, a1, t1, s1, motion1,sign;
        var v2, a2, t2, s2, motion2, ft;
        
        s0 = getTransformOffset(that)[that.axis];
        var boundaryOffset0 = getBoundaryOffset(that, s0);
        if(!boundaryOffset0) {
            //手指离开屏幕时，已经超出滚动范围，不作处理，让touchend handler处理
            //手指离开屏幕时，在滚动范围内，做一下惯性计算
            v0 = e['velocity' + that.axis.toUpperCase()];

            var maxV = 2;
            var friction = 0.0015;
            if (options.inertia && inertiaCoefficient[options.inertia]) {
                maxV = inertiaCoefficient[options.inertia][0];
                friction = inertiaCoefficient[options.inertia][1];
            }

            if (v0 > maxV) {
                v0 = maxV;
            }
            if (v0 < -maxV) {
                v0 = -maxV;
            }
            a0 = friction * ( v0 / Math.abs(v0));
            motion0 = new lib.motion({
                v: v0,
                a: -a0
            });
            t0 = motion0.t;
            s = s0 + motion0.s;

            var boundaryOffset1 = getBoundaryOffset(that, s);
            if (boundaryOffset1) {
                //惯性运动足够滑出屏幕边缘
                debugLog('惯性计算超出了边缘', boundaryOffset1);

                v1 = v0;
                a1 = a0;
                if(boundaryOffset1 > 0) {
                    s1 = that.minScrollOffset;
                    sign = 1;
                } else {
                    s1 = that.maxScrollOffset;
                    sign = -1;
                }
                motion1 = new lib.motion({
                    v: sign * v1, 
                    a: - sign * a1, 
                    s: Math.abs(s1 - s0)
                });
                t1 = motion1.t;
                var timeFunction1 = motion1.generateCubicBezier();

                v2 = v1 - a1 * t1;
                a2 = 0.03 * (v2 / Math.abs(v2));
                motion2 = new lib.motion({
                    v: v2,
                    a: -a2
                });
                t2 = motion2.t;
                s2 = s1 + motion2.s;
                var timeFunction2 = motion2.generateCubicBezier();

                if (options.noBounce) {
                    // 没有边缘回弹效果，直接平顺滑到边缘
                    debugLog('没有回弹效果');

                    if (s0 !== s1) {
                        element.style.webkitTransition = '-webkit-transform ' + (t1/1000).toFixed(2) + 's cubic-bezier(' + timeFunction1 + ') 0';
                        element.style.webkitTransform = 'translate' + that.axis.toUpperCase() + '(' + s1.toFixed(0) + 'px)';
                        setTransitionEndHandler(scrollEnd, (t1/1000).toFixed(2) * 1000);
                    } else {
                        scrollEnd();
                    }
                } else if (s0 !== s2) {
                    debugLog('惯性滚动', 's=' + s2.toFixed(0), 't=' + ((t1 + t2) / 1000).toFixed(2));

                    element.style.webkitTransition = '-webkit-transform ' + ((t1 + t2) / 1000).toFixed(2) + 's ease-out 0';                
                    element.style.webkitTransform = 'translate' + that.axis.toUpperCase() + '(' + s2.toFixed(0) + 'px)';

                    setTransitionEndHandler(function(e) {
                        if (!that.enabled) {
                            return;
                        }

                        debugLog('惯性回弹', 's=' + s1.toFixed(0), 't=400');

                        if (s2 !== s1) {
                            element.style.webkitTransition = '-webkit-transform 0.4s ease 0';
                            element.style.webkitTransform = 'translate' + that.axis.toUpperCase() + '(' + s1.toFixed(0) + 'px)';                            
                            setTransitionEndHandler(scrollEnd, 400);
                        } else {
                            scrollEnd();
                        }
                    }, ((t1 + t2) / 1000).toFixed(2) * 1000);
                } else {
                    scrollEnd();
                }
            } else {
                debugLog('惯性计算没有超出边缘');
                var timeFunction = motion0.generateCubicBezier();
                element.style.webkitTransition = '-webkit-transform ' + (t0 / 1000).toFixed(2) + 's cubic-bezier(' + timeFunction + ') 0';
                element.style.webkitTransform = 'translate' + that.axis.toUpperCase() + '(' + s.toFixed(0) + 'px)';
                setTransitionEndHandler(scrollEnd, (t0 / 1000).toFixed(2) * 1000);
            }


            isFlickScrolling = true;
            requestAnimationFrame(function() {
                if (isScrolling && isFlickScrolling && that.enabled) {
                    fireEvent(that, 'scrolling', {
                        afterFlick: true
                    });
                    requestAnimationFrame(arguments.callee);
                }
            });
        }
    }

    function scrollEnd(e) {
        if (!that.enabled) {
            return;
        }

        cancelScrollEnd = false;

        setTimeout(function() {
            if (!cancelScrollEnd && isScrolling) {
                isScrolling = false;
                isFlickScrolling = false;
                element.style.webkitTransition = '';
                fireEvent(that, 'scrollend');
            }
        }, 50);
    }


    var proto = {
        init: function() {
            this.enable();
            this.refresh();
            this.scrollTo(0);
            return this;
        },

        enable: function() {
            this.enabled = true;
            return this;
        },

        disable: function() {
            var el = this.element;
            this.enabled = false;

            requestAnimationFrame(function() {
                el.style.webkitTransform = getComputedStyle(el).webkitTransform;
            });

            return this;
        },

        getScrollWidth: function() {
            return getBoundingClientRect(this.element).width;
        },

        getScrollHeight: function() {
            return getBoundingClientRect(this.element).height;
        },

        getScrollLeft: function() {
            return -getTransformOffset(this).x - this.options.xPadding1;
        },

        getScrollTop: function() {
            return -getTransformOffset(this).y - this.options.yPadding1;
        },

        getMaxScrollLeft: function() {
            return -that.maxScrollOffset - this.options.xPadding1;
        },

        getMaxScrollTop: function() {
            return -that.maxScrollOffset - this.options.yPadding1;
        },

        getBoundaryOffset: function() {
            return Math.abs(getBoundaryOffset(this, getTransformOffset(this)[this.axis]) || 0);
        },

        refresh: function() {
            var el = this.element;
            var isVertical = (this.axis === 'y');
            var type = isVertical?'height':'width';

            if (this.options[type] != null) {
                // use options
                el.style[type] = this.options[type] + 'px';
            } else if (el.childElementCount > 0) {
                var range
                var rect;
                var firstEl = el.firstElementChild;
                var lastEl = el.lastElementChild;

                if (document.createRange) {
                    // use range
                    range = document.createRange();
                    range.selectNodeContents(el);
                    rect = getBoundingClientRect(range);
                }

                if (rect) {
                    el.style[type] = rect[type] + 'px';
                } else if (firstEl && lastEl) {
                    // use child offsets
                    while (firstEl) {
                        if (getBoundingClientRect(firstEl)[type] === 0 && firstEl.nextElementSibling) {
                            firstEl = firstEl.nextElementSibling;
                        } else {
                            break;
                        }
                    }

                    while (lastEl && lastEl !== firstEl) {
                        if (getBoundingClientRect(lastEl)[type] === 0 && lastEl.previousElementSibling) {
                            lastEl = lastEl.previousElementSibling;
                        } else {
                            break;
                        }
                    }

                    el.style[type] = (getBoundingClientRect(lastEl)[isVertical?'bottom':'right'] -
                        getBoundingClientRect(firstEl)[isVertical?'top':'left']) + 'px'; 
                } else {
                    el.style[type] = '0';
                }
            } else {
                el.style[type] = 'auto';
                el.style[type] = getBoundingClientRect(el)[type] + 'px';
            }

            this.transformOffset = getTransformOffset(this);
            this.minScrollOffset = getMinScrollOffset(this);
            this.maxScrollOffset = getMaxScrollOffset(this);
            this.scrollTo(-this.transformOffset[this.axis] - this.options[this.axis + 'Padding1']);
            fireEvent(this, 'contentchange');

            return this;
        },

        offset: function(childEl) {
            var elRect = getBoundingClientRect(this.element);
            var childRect = getBoundingClientRect(childEl);
            if (this.axis === 'y') {
                var offsetRect = {
                        top: childRect.top - elRect.top - this.options.yPadding1,
                        left: childRect.left - elRect.left,
                        right: elRect.right - childRect.right,
                        width: childRect.width,
                        height: childRect.height
                    };

                offsetRect.bottom = offsetRect.top + offsetRect.height;
            } else {
                var offsetRect = {
                        top: childRect.top - elRect.top,
                        bottom: elRect.bottom - childRect.bottom,
                        left: childRect.left - elRect.left - this.options.xPadding1,
                        width: childRect.width,
                        height: childRect.height
                    };

                offsetRect.right = offsetRect.left + offsetRect.width;
            }
            return offsetRect;
        },

        getRect: function(childEl) {
            var viewRect = getBoundingClientRect(this.viewport);
            var childRect = getBoundingClientRect(childEl);
            if (this.axis === 'y') {
                var offsetRect = {
                        top: childRect.top - viewRect.top,
                        left: childRect.left - viewRect.left,
                        right: viewRect.right - childRect.right,
                        width: childRect.width,
                        height: childRect.height
                    };

                offsetRect.bottom = offsetRect.top + offsetRect.height;
            } else {
                var offsetRect = {
                        top: childRect.top - viewRect.top,
                        bottom: viewRect.bottom - childRect.bottom,
                        left: childRect.left - viewRect.left,
                        width: childRect.width,
                        height: childRect.height
                    };

                offsetRect.right = offsetRect.left + offsetRect.width;
            }
            return offsetRect;
        },

        isInView: function(childEl) {
            var viewRect = getBoundingClientRect(this.viewport);
            var childRect = this.getRect(childEl);
            if (this.axis === 'y') {
                return viewRect.top < childRect.bottom && viewRect.bottom > childRect.top;
            } else {
                return viewRect.left < childRect.right && viewRect.right > childRect.left;
            }
        },

        scrollTo: function(offset, isSmooth) {
            var that = this;
            var element = this.element;

            offset = -offset - this.options[this.axis + 'Padding1'];
            offset = touchBoundary(this, offset);

            if (isSmooth === true) {
                element.style.webkitTransition = '-webkit-transform 0.4s ease 0';
                setTransitionEndHandler(scrollEnd, 400);
            } else {
                element.style.webkitTransition = '';
                setTransitionEndHandler(scrollEnd, 1);
            }
            if (this.axis === 'y') {
                element.style.webkitTransform = getTranslate(getTransformOffset(this).x, offset);
            } else {
                element.style.webkitTransform = getTranslate(offset, getTransformOffset(this).y);
            }

            return this;
        },

        scrollToElement: function(childEl, isSmooth) {
            var offset = this.offset(childEl);
            offset = offset[this.axis === 'y'?'top':'left'];
            return this.scrollTo(offset, isSmooth);
        },

        getViewWidth: function() {
            return getBoundingClientRect(this.viewport).width;
        },

        getViewHeight: function() {
            return getBoundingClientRect(this.viewport).height;
        },

        addPulldownHandler: function(handler) {
            var that = this;
            this.element.addEventListener('pulldownend', function(e) {
                that.disable();
                handler(e, function() {
                    that.scrollTo(0, true);
                    that.enable();
                });
            }, false);

            return this;
        },

        addPullupHandler: function(handler) {
            var that = this;

            this.element.addEventListener('pullupend', function(e) {
                that.disable();
                handler(e, function() {
                    that.scrollTo(that.getScrollHeight(), true);
                    that.enable();
                });
            }, false);

            return this;
        },

        addScrollstartHandler: function(handler) {
            this.element.addEventListener('scrollstart', function(e){
                handler(e);
            }, false);

            return this;
        },

        addScrollingHandler: function(handler) {
            this.element.addEventListener('scrolling', function(e){
                handler(e);
            }, false);

            return this;
        },

        addScrollendHandler: function(handler) {
            this.element.addEventListener('scrollend', function(e){
                handler(e);
            }, false);

            return this;
        },

        addEventListener: function() {
            this.element.addEventListener.apply(this.element, arguments);
        },

        removeEventListener: function() {
            this.element.removeEventListener.apply(this.element, arguments);  
        },

        enablePlugin: function(name, options) {
            var plugin = plugins[name];
            if (plugin && !this.plugins[name]) {
                this.plugins[name] = true;
                options = options || {};
                plugin.call(this, name, options);
            }
            return this;
        }
    }

    for (var k in proto) {
        this[k] = proto[k];
    }
    delete proto;
}

lib.scroll = function(el, options) {
    if (arguments.length === 1 && !(arguments[0] instanceof HTMLElement)) {
        options = arguments[0];
        if (options.scrollElement) {
            el = options.scrollElement;    
        } else if (options.scrollWrap) {
            el = options.scrollWrap.firstElementChild;
        } else {
            throw new Error('no scroll element');
        }
    }

    if (!el.parentNode) {
        throw new Error('wrong dom tree');
    }
    if (options && options.direction && ['x', 'y'].indexOf(options.direction) < 0) {
        throw new Error('wrong direction');
    }

    var scroll;
    if (el.scrollId) {
        scroll = scrollObjs[el.scrollId];
    } else {
        scroll = new Scroll(el, options);
    }
    return scroll;
}

lib.scroll.plugin = function(name, constructor) {
    if (constructor) {
        name = name.split(',');
        name.forEach(function(n) {
            plugins[n] = constructor;
        });
    } else {
        return plugins[name];
    }
}

})(window, window['lib']||(window['lib']={}));;//city selector
//@require lib.mtop
;
(function(win, lib) {
    var doc = win.document;
    var bodyEl = doc.body;
    var Scroll = lib.scroll;
    function _request(data, succ, fail) {
        /*if (window.WindVane && window.WindVane.api) {
            var param = {};
            param.api = data.api;
            param.v = data.v;
            param.ecode = '1';
            param.post = '1';

            param.param = data.data;

            window.WindVane.api.server.send(succ, fail, param);
        }
        else {*/
            lib.mtop.request(data, succ, fail);
        //}
    }

    function _getLocation(succ, fail) {
        var op = {
            // 指示浏览器获取高精度的位置，默认为false
            enableHighAcuracy: true,
            //获取详细地址描述信息
            address: true
        };
        win.WindVane.call('WVLocation','getLocation',{enableHighAcuracy:true, address:true},function(result){
            result = result || {};
            succ && succ({
                'extData' : result.address,
                'coords' : result.coords
            });
        },function(){
            fail && fail({});
        },1000);
        /*win.navigator.geolocation.getCurrentPosition (function(e) {
            //alert("获取到地理位置:"+JSON.stringify(e));
            succ && succ(e);
        }, function(e) {
            //alert("获取错误:"+JSON.stringify(e));
            fail && fail(e);
        }, op);*/
    }

    function _parse(r) {
        var ret = {};
        ret.cityGroup = {};

        var hotList = r.data.hotCityList || [],
            allList = r.data.allCityList || [];
        ret.allCityList = allList;
        for (var i = 0; i < hotList.length; i++) {
            var c = hotList[i];
            var py = lib.toPY(c.cityName);
            c.py = py[0];
        }

        for (var i = 0; i < allList.length; i++) {
            var c = allList[i];
            c.py = lib.toPY(c.cityName)[0];

            var ch = c.py.substr(0, 1);
            if (!ret.cityGroup[ch]) ret.cityGroup[ch] = [];
            ret.cityGroup[ch].push(c);
        }

        ret.hotCityList = hotList;
        var keys = Object.keys(ret.cityGroup).sort();
        ret.arrGroup = {};
        for (var i = 0; i < keys.length; i++) {
            ret.arrGroup[keys[i]] = ret.cityGroup[keys[i]];
        }

        return ret;
    }

    ;
    (function() {
        var cache = {};

        this.tmpl = function tmpl(str, data) {
            // Figure out if we're getting a template, or if we need to
            // load the template - and be sure to cache the result.
            var fn = !/\W/.test(str) ?
                cache[str] = cache[str] ||
                tmpl(doc.getElementById(str).innerHTML) :

            // Generate a reusable function that will serve as a template
            // generator (and which will be cached).
            new Function("obj",
                "var p=[],print=function(){p.push.apply(p,arguments);};" +

                // Introduce the data as local variables using with(){}
                "with(obj){p.push('" +

                // Convert the template into pure JavaScript
                str
                .replace(/[\r\t\n]/g, " ")
                .split("<%").join("\t")
                .replace(/((^|%>)[^\t]*)'/g, "$1\r")
                .replace(/\t=(.*?)%>/g, "',$1,'")
                .split("\t").join("');")
                .split("%>").join("p.push('")
                .split("\r").join("\\'") + "');}return p.join('');");

            // Provide some basic currying to the user
            return data ? fn(data) : fn;
        };
    })();

    var CitySelector = function(options) {
        this._ready = false;
        this._currentCity = null;
        options = options || {};
        this._init(options);
    };
    CitySelector.prototype = {
        _init: function(options) {
            var me = this;
            var cityCode = options.cityCode;
            var cityName = options.cityName;
            var data = options.data;
            this._initDom();
            this._bind();
            if(cityCode){
                me._currentCity = {
                    cityName: cityName,
                    cityCode: cityCode
                }
                me.fire('ready', me._currentCity);
            }
            else{
                _getLocation(function(e) {
                    var extData = e.extData || {};
                    var coords = e.coords || {};
                    me._currentCity = {
                        cityName: extData.cityName,
                        cityCode: extData.cityCode,
                        poi: extData.poi,
                        cityLongitude: coords.longitude,
                        cityLatitude: coords.latitude
                    };
                    me.fire('ready', me._currentCity);
                });
            }
            if(data){
                r = _parse({'data':data});
                me.CITY_DATA = r;
                me._render(r);
            }
            else{
                _request({
                    "api": "mtop.arctic.nearby.cityService.cityList",
                    "v": "1.0",
                    "data": {},
                }, function(r) {
                    //alert(6)
                    r = _parse(r);
                    me.CITY_DATA = r;
                    //console.log(r);
                    me._render(r);
                }, function(r) {
                    //alert(JSON.stringify(r))
                });
            }
            //禁用滑动
            me.isShowCityList = false;
            bodyEl.addEventListener('touchmove',function(e){
                if(me.isShowCityList){
                    e.preventDefault();
                }
            },false);
            doc.addEventListener('touchmove',function(e){
                if(me.isShowCityList){
                    e.preventDefault();
                }
            },false);
        },
        _bind: function() {
            var me = this;
            win.addEventListener('resize', function(e) {
                me._resize();
            }, false);

            bodyEl.addEventListener('click', function(e) {
                me._delegateClick(e);
            }, false);

            doc.querySelector('._cs_search_input').addEventListener('input', function(e) {
                var v = this.value.replace(/\s/g, '');
                //var csCityIndex = doc.getElementById('_cs_city_index');
                if (v) {
                    //csCityIndex.style.display = 'none';
                    //汉字
                    var city_data = me.CITY_DATA || {};
                    if(v.charCodeAt(0) > 255){
                        var allCityList = city_data ? city_data.allCityList : []; 
                        if(allCityList.length){
                            var ret = allCityList.filter(function(item){
                                return item.cityName.indexOf(v) !== -1;
                            });
                            //console.log(ret);
                            me._renderSearchList({
                                searchList: ret
                            });
                        }
                    }
                    else{
                        v = lib.toPY(v)[0].toUpperCase();
                        var fc = v.substr(0, 1);
                        var cityGroup = city_data.cityGroup || {};
                        if (cityGroup[fc]) {
                            //alert(me.CITY_DATA.cityGroup[fc].length);
                            // var data = {
                            //     searchList: me.CITY_DATA.cityGroup[fc]
                            // };
                            var ret = [];
                            for (var i = 0; i < cityGroup[fc].length; i++) {
                                var city = cityGroup[fc][i];
                                if (city.py.indexOf(v) > -1) {
                                    ret.push(city);
                                }
                            }
                            me._renderSearchList({
                                searchList: ret
                            });
                        } else {
                            me._renderSearchList({
                                searchList: []
                            })
                        }
                    }
                } else {
                    me._renderAllList();
                }

            }, false);
            //快速定位
            /*bodyEl.addEventListener('click',function(e){
                //e.preventDefault();
                var self = e.target;
                if(self.className != '_cs_sub_span'){
                    return;
                }
                var cls = '._cs_' + self.getAttribute('key');
                var toEle = doc.querySelector(cls);
                if(toEle){
                    me.scroller.scrollToElement(toEle,0);
                }
            },false);*/
        },
        _delegateClick: function(e) {
            //alert(e.target.nodeName);
            if (e.target.nodeName == 'A' && e.target.getAttribute('data-citycode')) {
                var citydata = {
                    cityCode: e.target.getAttribute('data-citycode'),
                    cityName: e.target.getAttribute('data-cityname'),
                    cityLongitude: e.target.getAttribute('data-lon'),
                    cityLatitude: e.target.getAttribute('data-lat')
                };
                this._changeCity(citydata);
            }

            //cancel
            if (e.target.nodeName == 'A' && e.target.className == '_cs_cancel') {
                this.hideSelector();
            }
        },
        _initDom: function() {
            var csStyle = doc.createElement('style');
            doc.head.appendChild(csStyle);
            csStyle.innerHTML = '\
                ._cs_wrap * {margin:0; padding:0}\
                ._cs_wrap a {text-decoration:none}\
                ._cs_wrap {\
                    position: absolute;\
                    width: 100%;\
                    height:100%;\
                    overflow:hidden;\
                    left:0;\
                    top:0;\
                    background:#FFFFFF;\
                    z-index:9999999;\
                    display:none;\
                }\
                ._cs_tit {\
                    height:42px;\
                    line-height:42px;\
                    background:#F8F8F8;\
                    overflow:hidden;\
                    position:relative;\
                    border-bottom: 1px solid #BABABA;\
                }\
                ._cs_tit h4 { color:#333; font-size:16px;padding-left:10px; }\
                ._cs_cancel { position:absolute; height:42px; line-height:42px;font-size:14px; color:#FC5C1F;padding:0 10px; right:0;top:0}\
                ._cs_search {padding:8px;background:#E5E5E7}\
                ._cs_search_inner {height:28px;background:#fff;-webkit-border-radius:5px;background-image:url(http://gtms03.alicdn.com/tps/i3/T1MvzOFB8eXXbsUaLc-26-28.png);background-size:13px 14px;background-repeat:no-repeat;background-position:10px 50%}\
                ._cs_search_input {display:inline-block;-webkit-appearance:none;border:0 none;display:block;width:82%;margin:0 auto;height:28px;font-size:14px;}\
                ._cs_curcity {text-align:left;font-size:14px;color:#797979;padding:0 12px;height:44px;line-height:44px;}\
                ._cs_curcity span {color:#343434}\
                ._cs_city_group {text-align:left;}\
                ._cs_city_group h5 {font-size:12px;font-weight:bold;background:#EEEEEE;padding:0 12px;color:#FC5D20;height:25px;line-height:25px;text-align:left}\
                ._cs_city_group ul a {text-decoration:none;color:#343434;font-size:14px;display:block;height:44px;line-height:44px}\
                ._cs_city_group ul {padding-left:12px;list-style:none}\
                ._cs_city_group li {border-bottom:1px solid #CCCCCC;list-style:none}\
                ._cs_city_group li:last-child {border-bottom:none}\
                ._cs_citylist {overflow:hidden;-webkit-overflow-scrolling:touch;}\
                ._cs_sub{position:absolute;right:0;top:90px;width:26px;padding:0 2px;font-size:12px;text-align:center;color:#f50;font-family:arial;}\
                ._cs_sub > ._cs_sub_hot{display:block;margin-bottom:4px;}\
                ._cs_sub > ._cs_sub_span{display:block;background-color:#eee;padding:1px;margin:0 4px;}\
            ';

            var _wrap = doc.createElement('div');
            _wrap.className = '_cs_wrap';
            bodyEl.appendChild(_wrap);
            this.dom = _wrap;

            this.dom.innerHTML = '\
                <div class="_cs_hd">\
                    <div class="_cs_tit">\
                        <h4>城市列表</h4>\
                        <a href="javascript:void(0)" class="_cs_cancel">取消</a>\
                    </div>\
                    <div class="_cs_search">\
                        <div class="_cs_search_inner">\
                        <span class="_cs_search_tip"></span>\
                        <input class="_cs_search_input" type="text" placeholder="输入城市名或首字母查询" />\
                        </div>\
                    </div>\
                </div>\
                <div id="_cs_citylist" class="_cs_citylist">\
                <div id="_cs_citylistinner"></div>\
                </div>\
            ';
            //<div class="_cs_curcity"><span>杭州</span> GPS定位</div>\
            this.dom.cityTmpl = '\
                <div id="_cs_cityScrollWrap">\
                    <div class="_cs_hot _cs_city_group">\
                        <h5>热门城市</h5>\
                        <ul>\
                            <% for (var i = 0; i < hotCityList.length; i ++) { %>\
                            <li><a href="javascript:void(0)" data-citycode="<%=hotCityList[i].cityCode%>" data-cityname="<%=hotCityList[i].cityName%>" data-lon="<%=hotCityList[i].cityLongitude%>" data-lat="<%=hotCityList[i].cityLatitude%>" data-py="<%=hotCityList[i].py%>"><%=hotCityList[i].cityName%></a></li>\
                            <% } %>\
                        </ul>\
                    </div>\
                    \
                    <% for (var key in arrGroup) { %>\
                    <div class="_cs_<%=key%> _cs_city_group">\
                        <h5><%=key%></h5>\
                        <ul>\
                        <% for (var j = 0; j < arrGroup[key].length; j ++) { %>\
                            <li><a href="javascript:void(0)" data-citycode="<%=arrGroup[key][j].cityCode%>" data-cityname="<%=arrGroup[key][j].cityName%>" data-lon="<%=arrGroup[key][j].cityLongitude%>" data-lat="<%=arrGroup[key][j].cityLatitude%>" data-py="<%=arrGroup[key][j].py%>"><%=arrGroup[key][j].cityName%></a></li>\
                        <% } %>\
                        </ul>\
                    </div>\
                    <% } %>\
                </div>\
                \
                ';
            /*this.dom.cityIndex = '\
                <div class="_cs_sub">\
                    <span class="_cs_sub_hot" key="hot">热门</span>\
                    <% for (var key in arrGroup) { %>\
                        <span class="_cs_sub_span" key="<%=key%>"><%=key%></span>\
                    <% } %>\
                </div>\
                \
            ';*/
            this.dom.searchTmpl = '\
            <div class="_cs_search_wrap">\
                <div class="_cs_city_group">\
                        <ul>\
                            <% for (var i = 0; i < searchList.length; i ++) { %>\
                            <li><a href="javascript:void(0)" data-citycode="<%=searchList[i].cityCode%>" data-cityname="<%=searchList[i].cityName%>" data-lon="<%=searchList[i].cityLongitude%>" data-lat="<%=searchList[i].cityLatitude%>" data-py="<%=searchList[i].py%>"><%=searchList[i].cityName%></a></li>\
                            <% } %>\
                        </ul>\
                    </div>\
            </div>\
            ';
        },
        _render: function(r) {
            var tpl = this.dom.cityTmpl;
            var html = tmpl(tpl, r);
            //alert(html);
            doc.getElementById('_cs_citylistinner').innerHTML = html;
            //doc.getElementById('_cs_city_index').innerHTML = tmpl(this.dom.cityIndex,r);
            this._resetScroller();
        },
        _resetScroller: function() {
            /*this.scroller = new IScroll('#_cs_citylist', {
                disableMouse : true,
                bindToWrapper: true,  //iscroll绑定事情的位置为当前的wrapper
                click: true,
                tap: true
            });*/
            var scroller = this.scroller;
            if(!scroller){
                this.scroller = new Scroll({
                    'scrollWrap' : doc.getElementById('_cs_citylist'),
                    'noBounce' : true
                });
                this.scroller.init();
            }
            else{
                scroller.refresh();
                scroller.scrollTo(0,0);
            }
            this._resize();
        },
        _renderAllList: function() {
            //var csCityIndex = doc.getElementById('_cs_city_index');
            //csCityIndex && (csCityIndex.style.display = '');
            this.CITY_DATA && this._render(this.CITY_DATA);
        },
        _renderSearchList: function(data) {
            var tpl = this.dom.searchTmpl;
            var html = tmpl(tpl, data);
            doc.getElementById('_cs_citylistinner').innerHTML = html;
            //doc.getElementById('_cs_city_index').innerHTML = tmpl(this.dom.cityIndex,data);
            this._resetScroller();
        },
        _resize: function() {
            var list = doc.getElementById('_cs_citylist'),
                hd = doc.querySelector('._cs_hd');
            if (list && hd) {
                list.style.height = (win.innerHeight - hd.offsetHeight) + 'px';
                this.scroller && this.scroller.refresh();
            }
        },
        _changeCity: function(city) {
            this._currentCity = city;
            this.fire('change', city);
            this.hideSelector();
        },
        fire: function(ev, data) {
            this._events = this._events || {};
            var evs = this._events[ev];
            var args = Array.prototype.slice.call(arguments, 1);
            if (evs && evs.length) {
                for (var i = 0; i < evs.length; i++) {
                    evs[i].apply(this, args);
                }
            }
            return this;
        },
        on: function(ev, callback) {
            this._events = this._events || {};
            if (!this._events[ev]) {
                this._events[ev] = [];
            }
            this._events[ev].push(callback);
            return this;
        },
        off: function(ev, callback) {
            this._events = this._events || {};
            if (!callback) {
                delete this._events[ev];
            } else {
                for (var i = 0; i < this._events[ev].length; i++) {
                    if (callback == this._events[ev][i]) {
                        this._events[ev].splice(i, 1);
                        break;
                    }
                }
            }
            return this;
        },
        getCurrentCity: function() {
            return this._currentCity;
        },
        showSelector: function() {
            var me = this;
            //禁止滑动
            me.isShowCityList = true;
            win.scrollTo(0,0);
            //bodyEl.style.height = doc.documentElement.clientHeight + 'px';
            bodyEl.style.overflow = 'hidden';
            doc.documentElement.overflow = 'hidden';

            this.dom.style.display = 'block';
            //this.scroller && this.scroller.refresh();
            this._renderAllList();
            this.dom.style.top = win.pageYOffset + 'px';
            this.dom.style.webkitTransitionDuration = 0;
            this.dom.style.webkitTransform = 'translate(0, ' + win.innerHeight + 'px)';
            setTimeout(function() {
                me.dom.style.webkitTransitionDuration = '300ms';
                me.dom.style.webkitTransform = 'translate(0, 0)';
            }, 0);
            /*setTimeout(function(){
                me.fire('show',me);
            },325);*/
        },
        hideSelector: function() {
            var me = this;
            //允许滑动
            me.isShowCityList = false;
            //bodyEl.style.height = 'auto';
            bodyEl.style.overflow = 'inherit';
            doc.documentElement.overflow = 'inherit';
            //me.fire('hide',me);

            var input = doc.querySelector('._cs_search_input');

            me.dom.style.webkitTransitionDuration = '500ms';
            me.dom.style.webkitTransform = 'translate(0, ' + win.innerHeight + 'px)';

            if (input) {
                input.blur();
                input.value = '';
            }
            setTimeout(function() {
                me.dom.style.display = 'none';
                me.dom.style.webkitTransitionDuration = 0;
            }, 300);

        }
    };

    lib.CitySelector = CitySelector;

})(window, window.lib || (window.lib = {}));